import json
from uuid import uuid4

from src.database import session
from src.models.match_model import MatchesOrm
from src.services.scoring_service import Match, Set, Game


class MatchService:
    def create_match(self, id_first_player: int, id_second_player: int) -> MatchesOrm:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—á"""
        with session() as db_session:
            match_uuid = str(uuid4())
            match = MatchesOrm(UUID=match_uuid, Player1=id_first_player,
                               Player2=id_second_player,
                               Score=
                               {"sets": [0, 0], "games": [0, 0], "points": [0, 0]}
                               # Score=json.dumps(
                               #     {"sets": [0, 0], "games": [0, 0], "points": [0, 0]})
                               )

            db_session.add(match)
            db_session.commit()
            db_session.refresh(match)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª "detached"
        return match

    def get_uuid_from_request(self, environ):
        """–ü–æ–ª—É—á–∞–µ—Ç UUID –º–∞—Ç—á–∞ –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
        query_string = environ.get("QUERY_STRING", "")
        params = dict(
            param.split("=") for param in query_string.split("&") if "=" in param)
        return params.get("uuid")

    def get_match_by_uuid(self, match_id):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç—á –∏–∑ –ë–î –ø–æ UUID –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç `Score` –≤ —Å–ª–æ–≤–∞—Ä—å"""
        with session() as db_session:
            match = db_session.query(MatchesOrm).filter_by(UUID=match_id).first()

            if match:
                # match.Score = json.loads(match.Score)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
                match.Score = match.Score

            return match

    def get_form_data(self, environ):
        """–ü–∞—Ä—Å–∏—Ç `POST`-–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request_body_size = int(environ.get("CONTENT_LENGTH", 0))
        except ValueError:
            request_body_size = 0

        request_body = environ["wsgi.input"].read(request_body_size).decode("utf-8")
        return dict(
            param.split("=") for param in request_body.split("&") if "=" in param)

    def update_match_score(self, match_id: str, player: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç –º–∞—Ç—á–∞, –¥–æ–±–∞–≤–ª—è—è –æ—á–∫–æ –∏–≥—Ä–æ–∫—É."""
        with session() as db_session:
            match = db_session.query(MatchesOrm).filter_by(UUID=match_id).first()
            if not match:
                return None

            player = int(player)

            # # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á—ë—Ç –∏–∑ JSON
            # match_score = json.loads(match.Score) if match.Score else {"sets": [0, 0],
            #                                                            "games": [0, 0],
            #                                                            "points": [0, 0]}
            match_score = match.Score if match.Score else {"sets": [0, 0],
                                                           "games": [0, 0],
                                                           "points": [0, 0]}

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            game = Game(Set(Match()))
            game.scores = match_score["points"]
            game.add_point(player)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ
            match_score["points"] = game.scores
            match.Score = json.dumps(
                match_score)  # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º **–≤–µ—Å—å** —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ points
            db_session.commit()
            return match

    def save_match(self, match):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Ç—á –≤ –ë–î"""
        with session() as db_session:
            db_session.add(match)
            db_session.commit()
